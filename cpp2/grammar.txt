start: program last_mission
last_mission:

program: decl+

decl: variable_decl
    | function_decl -> function
    | class_decl
    | interface_decl

variable_decl: variable ";"

variable: type IDENT

type: "int" -> int
    | "double" -> double
    | "bool" -> bool
    | "string" -> str
    | IDENT
    | type /\[[ \n]*\]/

function_decl: type IDENT init_func "(" formals ")" stmt_block exit_func
             | "void" IDENT init_func "(" formals ")" stmt_block exit_func
exit_func:
init_func: -> init_func

formals: variables?

variables: variable ("," variable)*

class_decl: init_class "class" IDENT ("extends" IDENT)? ("implements" IDENT ("," IDENT)*)? "{" field* "}" end_class -> class_decl

init_class: -> init_class
end_class: -> end_class

field: variable_decl -> var_field
     | function_decl -> func_field

interface_decl: "interface" IDENT "{" prototype* "}"

prototype: type IDENT "(" formals ")" ";"
         | "void" IDENT "(" formals ")" ";"

stmt_block:  push_scope "{" variable_decl* stmt* "}" pop_scope
push_scope: -> push_scope
pop_scope: -> pop_scope

stmt: if_stmt

non_if_stmt:  while_stmt
    | for_stmt
    | BREAK_STMT -> break_stmt
    | return_stmt
    | print_stmt
    | stmt_block
    | expr? ";"

if_stmt: ms
       | us

ms: "if" be if_cond ms "else" if_out_label ms
  | non_if_stmt

us: "if" be if_cond stmt if_out_label
  | "if" be if_cond ms "else" if_out_label us
if_cond:
if_out_label:

be: "(" expr ")"

while_stmt: make_start_label "while" "(" expr ")" make_condition_jump stmt make_loop_jump
make_start_label:
make_condition_jump:
make_loop_jump:

for_stmt: "for" "(" expr? ";" make_start_label expr for_jump ";" expr? step_jump ")" stmt return_jump
step_jump:
for_jump:
return_jump:

return_stmt: "return" expr? ";" -> return_func



print_stmt: "Print" print_begin "(" exprs ")" print_end ";"
print_begin:
print_end:

expr: e_layer1

e_layer1: e_layer9 "=" e_layer1 -> exp_assign
        | e_layer2 -> exp_normal

e_layer2: e_layer3 "||" e_layer2 -> exp_or
        | e_layer3 -> exp_normal

e_layer3: e_layer4 "&&" e_layer3 -> exp_and
        | e_layer4 -> exp_normal

e_layer4: e_layer5 "==" e_layer4 -> exp_equal
        | e_layer5 "!=" e_layer4 -> exp_unequal
        | e_layer5 -> exp_normal

e_layer5: e_layer6 "<" e_layer5 -> exp_lt
        | e_layer6 "<=" e_layer5 -> exp_le
        | e_layer6 ">" e_layer5 -> exp_gt
        | e_layer6 ">=" e_layer5 -> exp_ge
        | e_layer6 -> exp_normal

e_layer6: e_layer7 "+" e_layer6 -> exp_sum
        | e_layer7 "-" e_layer6 -> exp_sub
        | e_layer7 -> exp_normal

e_layer7: e_layer8 "*" e_layer7 -> exp_mul
        | e_layer8 "/" e_layer7 -> exp_div
        | e_layer8 "%" e_layer7 -> exp_rem
        | e_layer8 -> exp_normal

e_layer8: "-"e_layer8 -> exp_neg
        | "!"e_layer8 -> exp_not
        | e_layer9 -> exp_nine

e_layer9:  e_layer10 "." after_dot e_layer9 -> exp_mem
        | e_layer10 -> exp_normal
after_dot:

e_layer10:  e_layer10 "[" e_layer1 "]" -> exp_arr
        | end_layer -> exp_normal

end_layer: "ReadLine" "(" ")" -> read_line
         | "NewArray" "(" e_layer1 "," type ")" -> make_array
         | "ReadInteger" "(" ")" -> read_int
         | call
         | constant -> expr_const
         | "this" -> exp_this
         | "(" e_layer1 ")" -> exp_par
         | "new" IDENT -> new_class
         | IDENT -> exp_ident

BREAK_STMT: "break" ";"

call: IDENT "(" actuals ")" -> function_call

actuals: exprs?

exprs: expr ("," expr)* -> push_args

constant: DOUBLE_INT
        | int_constant
        | BOOL_CONSTANT
        | STRING_CONSTANT
        | "null" -> null

DOUBLE_INT: DECIMAL "." /[0-9]*([eE][-+]?[0-9]+)?/

BOOL_CONSTANT: "true"
             | "false"

IDENT: /(?!(tempo|int|bool|string|double|break|return|true|false|this|new)\b)[a-zA-Z]\w{0,30}/

int_constant: HEX -> hex_const
            | DECIMAL -> dec_const

HEX: /0[xX][0-9a-fA-F]+/

DECIMAL: /[0-9]+/

STRING_CONSTANT: /\"((\\\")|[^"])*\"/


COMMENT: /\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\//
       | "//"/.*/


%import common.WS

%ignore WS
%ignore COMMENT
